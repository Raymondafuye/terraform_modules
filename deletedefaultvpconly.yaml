AWSTemplateFormatVersion: 2010-09-09
Description: This template deletes the default VPC in the ap-northeast-2 region.

Resources:
  # InvokeLambdaCustomResource:
  #   Type: Custom::DeleteVpcs
  #   Properties:
  #     ServiceToken: !GetAtt LambdaFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: DeleteVpcsLambdaPolicy-default10
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudformation:*
            Effect: Allow
            Resource: "*"
          - Action:
            - ec2:Describe*
            - ec2:DetachInternetGateway
            - ec2:DeleteInternetGateway
            - ec2:DeleteSubnet
            - ec2:DeleteSecurityGroup
            - ec2:DeleteVpc
            Effect: Allow
            Resource: "*"
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      RoleName: 'DeleteDefaultVPCAWS-default10'

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda function for deleting the default VPC in ap-northeast-2 region"
      FunctionName: "DeleteDefaultVPC-default10"
      Handler: index.handler
      Runtime: 'python3.9'
      Timeout: 900
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          #import cfnresponse
          from botocore.exceptions import ClientError

          VERBOSE = 1

          def get_default_vpcs(client):
              vpc_list = []
              vpcs = client.describe_vpcs(
                  Filters=[
                      {
                          'Name': 'isDefault',
                          'Values': ['true'],
                      },
                  ]
              )
              for vpc in vpcs['Vpcs']:
                  vpc_list.append(vpc['VpcId'])
              return vpc_list

          def del_igw(ec2, vpcid):
              vpc_resource = ec2.Vpc(vpcid)
              igws = vpc_resource.internet_gateways.all()
              if igws:
                  for igw in igws:
                      try:
                          print("Detaching and Removing igw-id: ", igw.id) if (VERBOSE == 1) else ""
                          igw.detach_from_vpc(VpcId=vpcid)
                          #igw.delete()
                      except boto3.exceptions.Boto3Error as e:
                          print(e)

          # def del_sub(ec2, vpcid):
          #     vpc_resource = ec2.Vpc(vpcid)
          #     subnets = vpc_resource.subnets.all()
          #     if subnets:
          #         try:
          #             for sub in subnets:
          #                 print("Removing sub-id: ", sub.id) if (VERBOSE == 1) else ""
          #                 sub.delete()
          #         except boto3.exceptions.Boto3Error as e:
          #             print(e)

          # def del_rtb(ec2, vpcid):
          #     vpc_resource = ec2.Vpc(vpcid)
          #     rtbs = vpc_resource.route_tables.all()
          #     if rtbs:
          #         try:
          #             for rtb in rtbs:
          #                 assoc_attr = [rtb.associations_attribute for rtb in rtbs]
          #                 if [rtb_ass[0]['RouteTableId'] for rtb_ass in assoc_attr if rtb_ass[0]['Main'] == True]:
          #                     print(rtb.id + " is the main route table, continue...")
          #                     continue
          #                 print("Removing rtb-id: ", rtb.id) if (VERBOSE == 1) else ""
          #                 table = ec2.RouteTable(rtb.id)
          #                 table.delete()
          #         except boto3.exceptions.Boto3Error as e:
          #             print(e)

          # def del_acl(ec2, vpcid):
          #     vpc_resource = ec2.Vpc(vpcid)
          #     acls = vpc_resource.network_acls.all()
          #     if acls:
          #         try:
          #             for acl in acls:
          #                 if acl.is_default:
          #                     print(acl.id + " is the default NACL, continue...")
          #                     continue
          #                 print("Removing acl-id: ", acl.id) if (VERBOSE == 1) else ""
          #                 acl.delete()
          #         except boto3.exceptions.Boto3Error as e:
          #             print(e)

          # def del_sgp(ec2, vpcid):
          #     vpc_resource = ec2.Vpc(vpcid)
          #     sgps = vpc_resource.security_groups.all()
          #     if sgps:
          #         try:
          #             for sg in sgps:
          #                 if sg.group_name == 'default':
          #                     print(sg.id + " is the default security group, continue...")
          #                     continue
          #                 print("Removing sg-id: ", sg.id) if (VERBOSE == 1) else ""
          #                 sg.delete()
          #         except boto3.exceptions.Boto3Error as e:
          #             print(e)

          def del_vpc(ec2, vpcid):
              vpc_resource = ec2.Vpc(vpcid)
              try:
                  print("Removing vpc-id: ", vpc_resource.id)
                  vpc_resource.delete()
              except boto3.exceptions.Boto3Error as e:
                  print(e)
                  print("Please remove dependencies and delete VPC manually.")
          
          def send_response(event, context, response_status, response_data):
              if 'ResponseURL' in event:
                  import cfnresponse
                  cfnresponse.send(event, context, response_status, response_data)
              else:
                  print("ResponseURL not in event, skipping cfnresponse.send")
                  print("Response Status: ", response_status)
                  print("Response Data: ", response_data)

          def handler(event, context):
              region = 'ap-northeast-1'
              client = boto3.client('ec2', region_name=region)
              ec2 = boto3.resource('ec2', region_name=region)

              try:
                  vpcs = get_default_vpcs(client)
                  for vpc in vpcs:
                      print("\n" + "\n" + "REGION:" + region + "\n" + "VPC Id:" + vpc)
                      del_igw(ec2, vpc)
                      # del_sub(ec2, vpc)
                      # del_rtb(ec2, vpc)
                      # del_acl(ec2, vpc)
                      # del_sgp(ec2, vpc)
                      del_vpc(ec2, vpc)
                  response_data = {}
                  send_response(event, context, "SUCCESS", response_data)
              except ClientError as e:
                  print("Unexpected Error:", e)
                  response_data = {"Error": str(e)}
                  send_response(event, context, "FAILED", response_data)